package nonverblaster {	import flash.display.*;	import flash.net.*;	import flash.events.*;	import flash.geom.*;	import flash.utils.*;	import gs.TweenLite;	import gs.easing.*;		public class Preview extends MovieClip {				private var vidXML:XML;		private var vidList:XMLList;		private var photo:Bitmap = new Bitmap();		private var loader:Loader = new Loader();				private var xmlID:String;		private var ID:uint;		private var uldr:URLLoader = new URLLoader();		private var urlReq:URLRequest;		private var detailsURL:String;				private var titleText:String;		private var teaserURL:String;		private var targetX:Number;				public function Preview(){		}		public function init(_xmlID){			hover.alpha = 0;			this.xmlID = _xmlID;			loadXML();		}		public function showIt(timeOut){			targetX = x;			x += stage.stageWidth;			setTimeout(fadeIn, timeOut);		}		private function fadeIn(){			TweenLite.to(this, .8, {x:targetX, ease:Expo.easeInOut});		}		/////////////////////////////////////////////		// DAS XML LADEN		public function loadXML(){			uldr.addEventListener(Event.COMPLETE, xmlCompleteHandler, false, 0, true);			if(xmlID != ""){				uldr.load(new URLRequest("http://video.golem.de/xml/" + xmlID + ".xml"));			}		}		private function xmlCompleteHandler(event:Event):void {			uldr.removeEventListener(Event.COMPLETE, xmlCompleteHandler);						// das gesamte xml in der playlist speichern						vidXML = XML(event.target.data);			vidList = vidXML.children();						titleText = vidXML.title.toString();			teaserURL = "http://video.golem.de" + vidXML.medium.teaser.url.toString();			detailsURL = "http://video.golem.de" + vidXML.medium.detailsurl.toString();						loadPic(teaserURL);		}		/////////////////////////////////////////////		// DAS TEASER-BILD LADEN		public function loadPic(url){			configureListeners(loader.contentLoaderInfo);			urlReq = new URLRequest(url);			loader.load(urlReq);		}		private function configureListeners(dispatcher:IEventDispatcher):void {			dispatcher.addEventListener(Event.COMPLETE, completeHandler);        }		private function completeHandler(e:Event){			saveJPG(e.target.content.bitmapData);		}		private function saveJPG(photoData){			if(photo.bitmapData == null){				photo.bitmapData = new BitmapData(photoData.width, photoData.height);				photo.bitmapData.copyPixels(photoData, new Rectangle(0, 0, photo.width, photo.height), new Point(0, 0));				photo.smoothing = true;				previewPic.addChild(photo);			}			fitPic(photo);			this.addEventListener(MouseEvent.MOUSE_OVER, butHandler, false, 0, true);			this.addEventListener(MouseEvent.MOUSE_OUT, butHandler, false, 0, true);			this.addEventListener(MouseEvent.CLICK, butHandler, false, 0, true);			this.buttonMode = true;						photo.alpha = 0;			TweenLite.to(photo, .8, {alpha:1, ease:Cubic.easeOut});			setText();		}		private function setText(){			hover.textFeld.mouseEnabled = false;			hover.textFeld.autoSize = "center";			hover.textFeld.text = titleText;			hover.textFeld.x = hover.back.width / 2 - hover.textFeld.width / 2;			hover.textFeld.y = hover.back.height / 2 - hover.textFeld.height / 2;		}		private function butHandler(e:Event){			switch(e.type){				case "mouseOver":				TweenLite.to(hover, .5, {alpha:1, ease:Cubic.easeOut});				break;				case "mouseOut":				TweenLite.to(hover, .7, {alpha:0, ease:Cubic.easeIn});				break;				case "click":				try {					navigateToURL(new URLRequest(detailsURL), "_self");				} catch (e:Error){					navigateToURL(new URLRequest(detailsURL));				}				break;			}		}		private function fitPic(target){			var frameRatio = frame.width / frame.height;			var targetRatio = target.width / target.height;			//			if (targetRatio < frameRatio) {				target.width = Math.floor(frame.width);				target.scaleY = target.scaleX;			} else {				target.height = Math.floor(frame.height);				target.scaleX = target.scaleY;			}			target.x = Math.floor(frame.width/2 - target.width/2);			target.y = Math.floor(frame.height/2 - target.height/2);		}	}}